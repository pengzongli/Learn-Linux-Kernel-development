程序本身并不是进程，进程是处于执行期的程序以及相关的资源的总称。进程不仅仅局限一段可执行的代码，通常还要包含其他资源，像打开的文件，挂起的信号，内核内部数据，处理器状态，一个或多个具有内存映射的内存地址空间及一个或者多个执行线程，当然还包括用来存放全局变量的数据段等。

内核的调度对象是线程，而不是进程。

现代操作系统中，进程提供两种虚拟机制：虚拟处理器和虚拟内存。

在Linux系统中调用fork()，在Linux内核中，fork()实际上是由clone()系统调用实现的。

fork中完全复制父进程，内存开销很大，所有出现了写时复制的技术来缓存内存开销。

fork的开销很大，一般建议都是不要用进程了，因为进程创建的开销太大了，尽量使用线程。

fork()系统调用从内核返回两次：一次回到父进程，另一个回到新产生的子进程
可能有三种不同的返回值：
1）在父进程中，fork返回新创建子进程的进程ID；
2）在子进程中，fork返回0；
3）如果出现错误，fork返回一个负值；

fork()通过拷贝当前进程创建一个子进程。子进程与父进程的区别仅仅在于PID、PPID和某些资源和统计量（例如，挂起的信号，它没有必要被继承）。
exec()函数负责读取可执行文件并将其载入地址空间开始运行。

写时拷贝
Linux的fork()使用写时拷贝页实现。内核并不复制整个进程地址空间，而是让父进程和子进程共享同一个拷贝。只有在需要写入的时候，数据才会被复制，从而使各个进程拥有各自的拷贝。  


fork()由系统调用clone()实现，clone()再去调用do_fork(),do_fork()再调用copy_process():
copy_process():
(1)调用dup_task_struct()为新进程创建一个内核栈、thread_info结构和task_struct，这些值与当前进程的值完全相同。此时，子进程和父进程的描述符是完全相同的。
(2)检查并确保新创建这个子进程后，当前用户所拥有的进程数目没有超出给它分配的资源的限制。
(3)子进程着手使自己父进程区分开来。进程描述符内许多成员都要被清0或设为初始值。那些不是继承而来的进程描述符，主要是统计信息。task_struct中大多数数据都依然未被修改。
(4)子进程的状态被设置为TASK_UNINTERRUPTIBLE，以保证它不会投入运行。
(5)copy_process()调用copy_flags()以更新task_struct的flags成员。表明进程是否拥有超级用户权限的PF_SUPERPRIV标志被清0.表明进程还没有被调用exec()函数的PF_FORKNOEXEC标志被设置。
(6)调用alloc_pid()位新进程分配一个有效的PID。
(7)根据传递给clone()的参数标志，copy_process()拷贝或共享打开的文件、文件系统信息、信号处理函数、进程地址空间和命名空间等。在一般情况下，这些资源会被给定进程的所有线程贡献；否则，这些资源对每个进程是不同的，因此被拷贝到这里。
(8)最后，copy_process()做扫尾工作并返回一个指向子进程的指针。

再回到do_fork()函数，如果copy_process()函数成功返回，新创建的子进程被唤醒并让其投入运行。内核有意选择子进程首先执行。因为一般子进程都会马上调用exec()函数，这样可以避免写时拷贝的额外开销，如果父进程首先执行的话，有可能会开始向地址空间写入。


